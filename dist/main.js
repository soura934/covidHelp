/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ressources_countries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ressources/countries */ "./src/ressources/countries.js");

document.addEventListener("DOMContentLoaded", function () {
  var searchCountriesEle = document.querySelector(".search-countries");
  var SearchField = document.getElementById(".search-field");
  var listCountries = document.querySelector(".list-countries");

  function createList() {
    var numberOfCountries = _ressources_countries__WEBPACK_IMPORTED_MODULE_0__["listOfCountries"].length;
    var i = 0,
        listId;
    _ressources_countries__WEBPACK_IMPORTED_MODULE_0__["listOfCountries"].forEach(function (country, idx) {
      if (idx % Math.ceil(numberOfCountries / numberOfUlLists) == 0) {
        listId = "list-".concat(i);
        listCountries.innerHTML += "<ul id='".concat(listId, "'></ul>");
        i++;
      }

      document.getElementById("".concat(listId)).innerHTML += "<li onclick=\"fetchData('".concat(country.name, "')\" id=\"").concat(country.name, "\">\n            ").concat(country.name, "\n        </li>");
    });
  }

  var numberOfUlLists = 4;
  createList();
  listCountries.addEventListener("click", function () {
    listCountries.classList.toggle("hide");
  });
});

/***/ }),

/***/ "./src/ressources/countries.js":
/*!*************************************!*\
  !*** ./src/ressources/countries.js ***!
  \*************************************/
/*! exports provided: listOfCountries */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listOfCountries", function() { return listOfCountries; });
var listOfCountries = [{
  name: 'USA',
  code: 'US'
}, {
  name: 'Spain',
  code: 'ES'
}, {
  name: 'Italy',
  code: 'IT'
}, {
  name: 'France',
  code: 'FR'
}, {
  name: 'Germany',
  code: 'DE'
}, {
  name: 'UK',
  code: 'GB'
}, {
  name: 'Turkey',
  code: 'TR'
}, {
  name: 'Iran',
  code: 'IR'
}, {
  name: 'Russia',
  code: 'RU'
}, {
  name: 'Belgium',
  code: 'BE'
}, {
  name: 'Brazil',
  code: 'BR'
}, {
  name: 'Canada',
  code: 'CA'
}, {
  name: 'Netherlands',
  code: 'NL'
}, {
  name: 'Switzerland',
  code: 'CH'
}, {
  name: 'Portugal',
  code: 'PT'
}, {
  name: 'India',
  code: 'IN'
}, {
  name: 'Ireland',
  code: 'IE'
}, {
  name: 'Austria',
  code: 'AT'
}, {
  name: 'Peru',
  code: 'PE'
}, {
  name: 'Sweden',
  code: 'SE'
}, {
  name: 'Japan',
  code: 'JP'
}, {
  name: 'S. Korea',
  code: 'KR'
}, {
  name: 'Chile',
  code: 'CL'
}, {
  name: 'Saudi Arabia',
  code: 'SA'
}, {
  name: 'Poland',
  code: 'PL'
}, {
  name: 'Ecuador',
  code: 'EC'
}, {
  name: 'Romania',
  code: 'RO'
}, {
  name: 'Pakistan',
  code: 'PK'
}, {
  name: 'Mexico',
  code: 'MX'
}, {
  name: 'Denmark',
  code: 'DK'
}, {
  name: 'Norway',
  code: 'NO'
}, {
  name: 'UAE',
  code: 'AE'
}, {
  name: 'Czechia',
  code: 'CZ'
}, {
  name: 'Australia',
  code: 'AU'
}, {
  name: 'Singapore',
  code: 'SG'
}, {
  name: 'Indonesia',
  code: 'ID'
}, {
  name: 'Serbia',
  code: 'RS'
}, {
  name: 'Philippines',
  code: 'PH'
}, {
  name: 'Ukraine',
  code: 'UA'
}, {
  name: 'Qatar',
  code: 'QA'
}, {
  name: 'Malaysia',
  code: 'MY'
}, {
  name: 'Belarus',
  code: 'BY'
}, {
  name: 'Dominican Republic',
  code: 'DO'
}, {
  name: 'Panama',
  code: 'PA'
}, {
  name: 'Finland',
  code: 'FI'
}, {
  name: 'Colombia',
  code: 'CO'
}, {
  name: 'Luxembourg',
  code: 'LU'
}, {
  name: 'South Africa',
  code: 'ZA'
}, {
  name: 'Egypt',
  code: 'EG'
}, {
  name: 'Argentina',
  code: 'AR'
}, {
  name: 'Morocco',
  code: 'MA'
}, {
  name: 'Thailand',
  code: 'TH'
}, {
  name: 'Algeria',
  code: 'DZ'
}, {
  name: 'Moldova',
  code: 'MD'
}, {
  name: 'Bangladesh',
  code: 'BD'
}, {
  name: 'Greece',
  code: 'GR'
}, {
  name: 'Hungary',
  code: 'HU'
}, {
  name: 'Kuwait',
  code: 'KW'
}, {
  name: 'Bahrain',
  code: 'BH'
}, {
  name: 'Croatia',
  code: 'HR'
}, {
  name: 'Iceland',
  code: 'IS'
}, {
  name: 'Kazakhstan',
  code: 'KZ'
}, {
  name: 'Uzbekistan',
  code: 'UZ'
}, {
  name: 'Estonia',
  code: 'EE'
}, {
  name: 'Iraq',
  code: 'IQ'
}, {
  name: 'New Zealand',
  code: 'NZ'
}, {
  name: 'Azerbaijan',
  code: 'AZ'
}, {
  name: 'Slovenia',
  code: 'SI'
}, {
  name: 'Lithuania',
  code: 'LT'
}, {
  name: 'Armenia',
  code: 'AM'
}, {
  name: 'Bosnia and Herzegovina',
  code: 'BA'
}, {
  name: 'Oman',
  code: 'OM'
}, {
  name: 'North Macedonia',
  code: 'MK'
}, {
  name: 'Slovakia',
  code: 'SK'
}, {
  name: 'Cuba',
  code: 'CU'
}, {
  name: 'Hong Kong',
  code: 'HK'
}, {
  name: 'Cameroon',
  code: 'CM'
}, {
  name: 'Afghanistan',
  code: 'AF'
}, {
  name: 'Bulgaria',
  code: 'BG'
}, {
  name: 'Tunisia',
  code: 'TN'
}, {
  name: 'Ghana',
  code: 'GH'
}, {
  name: 'Ivory Coast',
  code: 'CI'
}, {
  name: 'Cyprus',
  code: 'CY'
}, {
  name: 'Djibouti',
  code: 'DJ'
}, {
  name: 'Latvia',
  code: 'LV'
}, {
  name: 'Andorra',
  code: 'AD'
}, {
  name: 'Lebanon',
  code: 'LB'
}, {
  name: 'Costa Rica',
  code: 'CR'
}, {
  name: 'Niger',
  code: 'NE'
}, {
  name: 'Burkina Faso',
  code: 'BF'
}, {
  name: 'Albania',
  code: 'AL'
}, {
  name: 'Kyrgyzstan',
  code: 'KG'
}, {
  name: 'Nigeria',
  code: 'NG'
}, {
  name: 'Bolivia',
  code: 'BO'
}, {
  name: 'Guinea',
  code: 'GN'
}, {
  name: 'Uruguay',
  code: 'UY'
}, {
  name: 'Honduras',
  code: 'HN'
}, {
  name: 'San Marino',
  code: 'SM'
}, {
  name: 'Palestine',
  code: 'PS'
}, {
  name: 'Malta',
  code: 'MT'
}, {
  name: 'Taiwan',
  code: 'TW'
}, {
  name: 'Jordan',
  code: 'JO'
}, {
  name: 'RÃ©union',
  code: 'RE'
}, {
  name: 'Georgia',
  code: 'GE'
}, {
  name: 'Senegal',
  code: 'SN'
}, {
  name: 'Mauritius',
  code: 'MU'
}, {
  name: 'DRC',
  code: 'CD'
}, {
  name: 'Montenegro',
  code: 'ME'
}, {
  name: 'Isle of Man',
  code: 'IM'
}, {
  name: 'Sri Lanka',
  code: 'LK'
}, {
  name: 'Mayotte',
  code: 'YT'
}, {
  name: 'Kenya',
  code: 'KE'
}, {
  name: 'Vietnam',
  code: 'VN'
}, {
  name: 'Guatemala',
  code: 'GT'
}, {
  name: 'Venezuela',
  code: 'VE'
}, {
  name: 'Mali',
  code: 'ML'
}, {
  name: 'Paraguay',
  code: 'PY'
}, {
  name: 'El Salvador',
  code: 'SV'
}, {
  name: 'Jamaica',
  code: 'JM'
}, {
  name: 'Tanzania',
  code: 'TZ'
}, {
  name: 'Martinique',
  code: 'MQ'
}, {
  name: 'Guadeloupe',
  code: 'GP'
}, {
  name: 'Rwanda',
  code: 'RW'
}, {
  name: 'Congo',
  code: 'CG'
}, {
  name: 'Brunei',
  code: 'BN'
}, {
  name: 'Somalia',
  code: 'SO'
}, {
  name: 'Gibraltar',
  code: 'GI'
}, {
  name: 'Cambodia',
  code: 'KH'
}, {
  name: 'Madagascar',
  code: 'MG'
}, {
  name: 'Trinidad and Tobago',
  code: 'TT'
}, {
  name: 'Gabon',
  code: 'GA'
}, {
  name: 'Myanmar',
  code: 'MM'
}, {
  name: 'Ethiopia',
  code: 'ET'
}, {
  name: 'Aruba',
  code: 'AW'
}, {
  name: 'French Guiana',
  code: 'GF'
}, {
  name: 'Monaco',
  code: 'MC'
}, {
  name: 'Bermuda',
  code: 'BM'
}, {
  name: 'Togo',
  code: 'TG'
}, {
  name: 'Liechtenstein',
  code: 'LI'
}, {
  name: 'Equatorial Guinea',
  code: 'GQ'
}, {
  name: 'Liberia',
  code: 'LR'
}, {
  name: 'Barbados',
  code: 'BB'
}, {
  name: 'Sudan',
  code: 'SD'
}, {
  name: 'Guyana',
  code: 'GY'
}, {
  name: 'Zambia',
  code: 'ZM'
}, {
  name: 'Cabo Verde',
  code: 'CV'
}, {
  name: 'Cayman Islands',
  code: 'KY'
}, {
  name: 'Bahamas',
  code: 'BS'
}, {
  name: 'French Polynesia',
  code: 'PF'
}, {
  name: 'Uganda',
  code: 'UG'
}, {
  name: 'Maldives',
  code: 'MV'
}, {
  name: 'Libya',
  code: 'LY'
}, {
  name: 'Guinea-Bissau',
  code: 'GW'
}, {
  name: 'Macao',
  code: 'MO'
}, {
  name: 'Haiti',
  code: 'HT'
}, {
  name: 'Syria',
  code: 'SY'
}, {
  name: 'Eritrea',
  code: 'ER'
}, {
  name: 'Mozambique',
  code: 'MZ'
}, {
  name: 'Saint Martin',
  code: 'MF'
}, {
  name: 'Benin',
  code: 'BJ'
}, {
  name: 'Chad',
  code: 'TD'
}, {
  name: 'Mongolia',
  code: 'MN'
}, {
  name: 'Nepal',
  code: 'NP'
}, {
  name: 'Sierra Leone',
  code: 'SL'
}, {
  name: 'Zimbabwe',
  code: 'ZW'
}, {
  name: 'Angola',
  code: 'AO'
}, {
  name: 'Antigua and Barbuda',
  code: 'AG'
}, {
  name: 'Eswatini',
  code: 'SZ'
}, {
  name: 'Botswana',
  code: 'BW'
}, {
  name: 'Timor-Leste',
  code: 'TL'
}, {
  name: 'Belize',
  code: 'BZ'
}, {
  name: 'New Caledonia',
  code: 'NC'
}, {
  name: 'Malawi',
  code: 'MW'
}, {
  name: 'Fiji',
  code: 'FJ'
}, {
  name: 'Dominica',
  code: 'DM'
}, {
  name: 'Namibia',
  code: 'NA'
}, {
  name: 'Saint Lucia',
  code: 'LC'
}, {
  name: 'Grenada',
  code: 'GD'
}, {
  name: 'Saint Kitts and Nevis',
  code: 'KN'
}, {
  name: 'CAR',
  code: 'CF'
}, {
  name: 'St. Vincent Grenadines',
  code: 'VC'
}, {
  name: 'Turks and Caicos',
  code: 'TC'
}, {
  name: 'Falkland Islands',
  code: 'FK'
}, {
  name: 'Greenland',
  code: 'GL'
}, {
  name: 'Montserrat',
  code: 'MS'
}, {
  name: 'Seychelles',
  code: 'SC'
}, {
  name: 'Suriname',
  code: 'SR'
}, {
  name: 'Nicaragua',
  code: 'NI'
}, {
  name: 'Gambia',
  code: 'GM'
}, {
  name: 'Vatican City',
  code: 'VA'
}, {
  name: 'Mauritania',
  code: 'MR'
}, {
  name: 'Papua New Guinea',
  code: 'PG'
}, {
  name: 'St. Barth',
  code: 'BL'
}, {
  name: 'Burundi',
  code: 'BI'
}, {
  name: 'Bhutan',
  code: 'BT'
}, {
  name: 'Caribbean Netherlands',
  code: 'BQ'
}, {
  name: 'British Virgin Islands',
  code: 'VG'
}, {
  name: 'Sao Tome and Principe',
  code: 'ST'
}, {
  name: 'South Sudan',
  code: 'SD'
}, {
  name: 'Anguilla',
  code: 'AI'
}, {
  name: 'Saint Pierre Miquelon',
  code: 'PM'
}, {
  name: 'Yemen',
  code: 'YE'
}, {
  name: 'China',
  code: 'CN'
}];

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,